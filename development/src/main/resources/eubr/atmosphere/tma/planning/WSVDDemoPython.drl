package eubr.atmosphere.tma.planning
 
dialect "mvel"

import eubr.atmosphere.tma.planning.AdaptationManager
import eubr.atmosphere.tma.data.Action
import eubr.atmosphere.tma.data.Configuration
import eubr.atmosphere.tma.utils.TrustworthinessScore

declare TrustworthinessScore
      @role(event)
      @expires(1s)
      //@timestamp (eventDestinationTimestamp)
 end

rule "Score validation - Wildfly Scale up"
    when
        $score: TrustworthinessScore ( resourceConsumptionScore.score > 0.18, podCount < 3 )
    then
        Action action = new Action(3, "demoPython", 9, 3);
        action.addConfiguration(new Configuration(1, "metadata.namespace", "default"));
        action.addConfiguration(new Configuration(2, "metadata.name", "wildfly"));
        action.addConfiguration(new Configuration(3, "spec.replicas", "3"));
        AdaptationManager.performAdaptation( action );
end

rule "Score validation - Wildfly Scale down"
    when
        $score: TrustworthinessScore ( resourceConsumptionScore.score < 0.1650, podCount > 1 )
    then
        Action action = new Action(3, "demoPython", 9, 3);
        action.addConfiguration(new Configuration(1, "metadata.namespace", "default"));
        action.addConfiguration(new Configuration(2, "metadata.name", "wildfly"));
        action.addConfiguration(new Configuration(3, "spec.replicas", "1"));
        AdaptationManager.performAdaptation( action );
end
